#define REVEAL FALSE
#define START_LEVEL 0


//-----------------------------------------------------------------------
// This function clears the map...
Clear()
  SystemSet(SYS_MAPCLEAR, 0, 0, 0)

//-----------------------------------------------------------------------
// This function clears all rooms on the current level
int ClearLevel()
  int num_room
  int room
  int level_to_clear, level


  num_room = GetNumberOfRooms()
  if(num_room > 0)
    room = num_room-1
    level_to_clear = GetRoomLevel(room)

    level = level_to_clear
    while(level == level_to_clear && room > 0)
      SystemSet(SYS_MAPROOM, 0, MAP_ROOM_REMOVE, 0)
      room--
      level = GetRoomLevel(room)
  return TRUE


//-----------------------------------------------------------------------
int SetCurrentRoom(int room)
  int num_room
  int srf_file
  int twset
  int flags
  int i, target, index


  num_room = GetNumberOfRooms()
  if(room < num_room)
    SystemSet(SYS_MAPROOM, 0, MAP_ROOM_CURRENT, room)
    flags = SystemGet(SYS_MAPROOM, room, MAP_ROOM_FLAGS)
    if(!(flags & MAP_ROOM_FLAG_FOUND))
      // New room is unexplored...
      flags = flags | MAP_ROOM_FLAG_FOUND
      SystemSet(SYS_MAPROOM, room, MAP_ROOM_UPDATE_FLAGS, flags)
      // Give dilligence to all the players
      i = 0
      while(i < 4)
        index = SystemGet(SYS_LOCALPLAYER, i, 0)
        ExperienceFunction(index, EXPERIENCE_VIRTUE_DILLIGENCE, 1, FALSE)
        i++
    else
      // New room has already been explored...
      // Take dilligence from all the players
      i = 0
      while(i < 4)
        index = SystemGet(SYS_LOCALPLAYER, i, 0)
        target = FindByIndex(index)
        if(target)
          if(target.virdill < 100)
            ExperienceFunction(index, EXPERIENCE_VIRTUE_DILLIGENCE, -1, FALSE)
        i++
    if(flags & MAP_ROOM_FLAG_TOWN)
      SystemSet(SYS_MAPROOM, 0, MAP_ROOM_LAST_TOWN, room)
    srf_file = SystemGet(SYS_MAPROOM, room, MAP_ROOM_SRF)
    twset = SystemGet(SYS_MAPROOM, room, MAP_ROOM_TWSET)
    GoPoof(POOF_ALL_PARTICLES)
    if(twset == 0)
      // Normal
      SystemSet(SYS_ROOMUNCOMPRESS, srf_file, "FILE:WALLSET0.DDD", room)
    else
      // Town
      SystemSet(SYS_ROOMUNCOMPRESS, srf_file, "FILE:WALLSET1.DDD", room)
    TextureSet(srf_file, twset, FALSE)


//-----------------------------------------------------------------------
int TextureSet(int srf_file, int set_number, int wroomer)
  int i, j, tex_offset, self

  if(srf_file)
    tex_offset = (FileReadByte(srf_file, 56)<<24) | (FileReadByte(srf_file, 57)<<16) | (FileReadByte(srf_file, 58)<<8) | FileReadByte(srf_file, 59)
    tex_offset = tex_offset + 32


    i = 0
    while(i < 32)
      StringClear(String(0))
      StringAppend(String(0), srf_file+tex_offset, 9)
      StringUppercase(String(0))
      if(StringCompare(String(0), "DECAL"))
        StringClear(String(0))
        StringAppend(String(0), "=MPDECAL", 9)
      if(StringCompare(String(0), "CAVE"))
        StringClear(String(0))
        StringAppend(String(0), "MPFL00A", 9)
      if(StringCompare(String(0), "CAVEBR"))
        StringClear(String(0))
        StringAppend(String(0), "=MPBR00A", 9)
      if(StringCompare(String(0), "LAWN"))
        StringClear(String(0))
        StringAppend(String(0), "MPFL01A", 9)
      if(StringCompare(String(0), "LAWNBR"))
        StringClear(String(0))
        StringAppend(String(0), "=MPBR01A", 9)
      if(StringCompare(String(0), "WOOD"))
        StringClear(String(0))
        StringAppend(String(0), "MPFL05A", 9)
      if(StringCompare(String(0), "WOODBR"))
        StringClear(String(0))
        StringAppend(String(0), "MPBR05A", 9)
      if(StringCompare(String(0), "FLOOR"))
        StringClear(String(0))
        StringAppend(String(0), "MPFL07A", 9)
      if(StringCompare(String(0), "FLOOR2"))
        StringClear(String(0))
        StringAppend(String(0), "MPFL03A", 9)
      if(StringCompare(String(0), "WALL"))
        StringClear(String(0))
        StringAppend(String(0), "MPWL05A", 9)
      if(StringCompare(String(0), "WALLCAP"))
        StringClear(String(0))
        StringAppend(String(0), "MPCP05A", 9)
      if(StringCompare(String(0), "FENCE"))
        StringClear(String(0))
        StringAppend(String(0), "MPFENCE", 9)
      if(StringCompare(String(0), "PAVE"))
        StringClear(String(0))
        StringAppend(String(0), "MPPAVE", 9)
      StringAppend(String(0), ".RGB", 16)
      SystemSet(SYS_ROOMTEXTURE, wroomer, i, FileOpen(String(0), FILE_NORMAL))
      tex_offset = tex_offset+8
      i++


//-----------------------------------------------------------------------
int GetCurrentRoom()
  return SystemGet(SYS_MAPROOM, 0, MAP_ROOM_CURRENT)


//-----------------------------------------------------------------------
int GetCurrentArea()
  int room
  room = SystemGet(SYS_MAPROOM, 0, MAP_ROOM_CURRENT)
  return SystemGet(SYS_MAPROOM, room, MAP_ROOM_AREA)


//-----------------------------------------------------------------------
int GetCurrentDifficulty()
  int room
  room = SystemGet(SYS_MAPROOM, 0, MAP_ROOM_CURRENT)
  return SystemGet(SYS_MAPROOM, room, MAP_ROOM_DIFFICULTY)


//-----------------------------------------------------------------------
int GetCurrentLevel()
  int room
  room = SystemGet(SYS_MAPROOM, 0, MAP_ROOM_CURRENT)
  return SystemGet(SYS_MAPROOM, room, MAP_ROOM_LEVEL)


//-----------------------------------------------------------------------
int GetRoomX(int room)
  return SystemGet(SYS_MAPROOM, room, MAP_ROOM_X)


//-----------------------------------------------------------------------
int GetRoomY(int room)
  return SystemGet(SYS_MAPROOM, room, MAP_ROOM_Y)


//-----------------------------------------------------------------------
int GetRoomLevel(int room)
  return SystemGet(SYS_MAPROOM, room, MAP_ROOM_LEVEL)


//-----------------------------------------------------------------------
int GetRoomFlags(int room)
  return SystemGet(SYS_MAPROOM, room, MAP_ROOM_FLAGS)

//-----------------------------------------------------------------------
int GetRoomDoorSpin()
  return (SystemGet(SYS_MAPROOM, 0, MAP_ROOM_DOOR_SPIN))

//-----------------------------------------------------------------------
float GetRoomDoorXYZ(int room, int from_room, int axis, float pushback)
  int door

  door = 0
  while(door < 5)
    if(SystemGet(SYS_MAPROOM, room | (door<<16), MAP_ROOM_NEXT_ROOM) == from_room)
      SystemSet(SYS_MAPROOM, 0, MAP_ROOM_DOOR_PUSHBACK, pushback*100.0)
      if(axis == 0)
        return (0.01 * SystemGet(SYS_MAPROOM, room | (door<<16), MAP_ROOM_DOOR_X))
      if(axis == 1)
        return (0.01 * SystemGet(SYS_MAPROOM, room | (door<<16), MAP_ROOM_DOOR_Y))
      return (0.01 * SystemGet(SYS_MAPROOM, room | (door<<16), MAP_ROOM_DOOR_Z))
    door++
  return 0.0


//-----------------------------------------------------------------------
int GetRoomDoorDestination(int room, int door)
  return SystemGet(SYS_MAPROOM, room | (door<<16), MAP_ROOM_NEXT_ROOM)


//-----------------------------------------------------------------------
int GetNumberOfRooms()
  return SystemGet(SYS_MAPROOM, 0, MAP_ROOM_NUMBER)

//-----------------------------------------------------------------------
int GetLastRoom()
  return (SystemGet(SYS_MAPROOM, 0, MAP_ROOM_NUMBER)-1)

//-----------------------------------------------------------------------
// This function adds a room to the map at a random location
// on the same level as the last room added.  If the last
// room was a stairway down, it gets added on the next level.
// Returns TRUE if it FAILED ON AN IMPORTANT ROOM!!!  FALSE
// if it worked or failed on a normal room...
SuperPlopRoom(int file, int area, int force_from_room, int rotation_fix, int flags)
  int level, temp, i
  int multi
  int first_room_on_level, attempt
  int num_room, looking, from_room, rotation, difficulty
  int num_attempt
  float x, y, scale, angle



  num_room = GetNumberOfRooms()
  if(num_room > 0)
    first_room_on_level = num_room-1
    level = GetRoomLevel(first_room_on_level)
    temp = GetRoomFlags(first_room_on_level)
    if(temp & MAP_ROOM_FLAG_DUAL_LEVEL)
      // Our last room plopped was a stairway down...
      level++
    else
      looking = TRUE
      while(looking && first_room_on_level > 0)
        first_room_on_level--
        if(GetRoomLevel(first_room_on_level) != level)
          // We found a room on a different level...
          looking = FALSE
          first_room_on_level++


    // How many rooms do we have on this level?
    i = num_room - first_room_on_level


    // Attempt to plop it until it works...
    attempt = 0
    num_attempt = 20
    multi = TRUE
    if(rotation_fix)
      num_attempt = 100
    if(force_from_room > -1)
      num_attempt = 200
    if(flags & (255-MAP_ROOM_FLAG_FOUND))
      num_attempt = 200
      multi = FALSE
    while(attempt < num_attempt)
      // Pick a random room to connect to...
      from_room = first_room_on_level
      if(i > 1)
        from_room = first_room_on_level + (RollDice(1, i)-1)
      if(force_from_room > -1)
        from_room = force_from_room

      angle = (RollDice(1, 256)*360) >> 8
      scale = RollDice(1, 120) + 150
      x = GetRoomX(from_room) + (sin(angle)*scale)
      y = GetRoomY(from_room) + (sin(angle+90.0)*scale)
      rotation = (RollDice(1, 256)<<8)
      if(rotation_fix)
        if(attempt < (num_attempt>>1))
          rotation = SystemGet(SYS_MAPROOM, from_room, MAP_ROOM_ROTATION) + rotation_fix
      difficulty = ((NumLocalPlayer()-1)*42) + RollDice(1, 50)
      AddRoom(x, y, level, area, difficulty, rotation, file, from_room, multi, RollDice(1, 256), 0, flags)
      if(num_room < GetNumberOfRooms())
        // We added the room!  Let's have a party!  Or maybe
        // we can just return FALSE...
        return FALSE
      attempt++


  if(num_attempt > 50)
    // We failed to plop an important room...
    return TRUE
  return FALSE

//-----------------------------------------------------------------------
// This function adds a room to the map...
AddRoom(float x, float y, int level, int area, int difficulty, int rotation, int file, int from_room, int multi_connect, int seed, int twset, int flags)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_SRF, file)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_X, x)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_Y, y)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_ROTATION, rotation)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_SEED, seed)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_TWSET, twset)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_LEVEL, level)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_FLAGS, flags)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_AREA, area)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_DIFFICULTY, difficulty)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_FROM_ROOM, from_room)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_MULTI_CONNECT, multi_connect)
  SystemSet(SYS_MAPROOM, 0, MAP_ROOM_ADD, 0)



//-----------------------------------------------------------------------
// This function is supposed to build the whole world map...
Setup()
  int seed, i, flags, difficulty, mine_fork_room, fail


  // Set the game seed...
  // !!!BAD!!!
  // !!!BAD!!!  Should probably do this better...
  // !!!BAD!!!
  seed = SystemGet(SYS_MAINVIDEOFRAME, 0, 0)
  SystemSet(SYS_RANDOMSEED, 0, 0, seed)


  // Build the list of items...
  ITEMREG.Setup()


  // Setup the map...  Chain rooms together...
  Clear()
  flags = 0
  if(REVEAL)
    flags = MAP_ROOM_FLAG_FOUND


  // Town...
  AddRoom(   0.0,    0.0, 0,  AREA_SUMMON, 0,40960, "FILE:TOWN000.SRF", 65535, FALSE, RollDice(1, 256), 1, flags | MAP_ROOM_FLAG_TOWN | MAP_ROOM_FLAG_FOUND | MAP_ROOM_FLAG_OUTSIDE)
  AddRoom( -300.0,   0.0, 0,  AREA_SUMMON, 0,33300, "FILE:ARENA000.SRF",    0, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND)


  // Castle and cellar...
  if(START_LEVEL <= 0)
    // Castle
    AddRoom(   0.0, -120.0, 0,  AREA_SUMMON, 0,    0, "FILE:TOWN001.SRF", 0, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND)
    AddRoom(   0.0, -280.0, 0,  AREA_SUMMON, 0,    0, "FILE:TOWN002.SRF", 2, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND)
    AddRoom(-130.0, -150.0, 0,  AREA_SUMMON, 0,    0, "FILE:TOWN003.SRF", 2, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND)
    AddRoom( 130.0, -120.0, 0,  AREA_SUMMON, 0,    0, "FILE:TOWN004.SRF", 2, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND)
    AddRoom(-130.0, -270.0, 0,  AREA_SUMMON, 0,    0, "FILE:TOWN005.SRF", 4, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND)
    AddRoom(-130.0, -350.0, 0,  AREA_SUMMON, 0,    0, "FILE:TOWN006.SRF", 6,  TRUE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND)
    AddRoom( 145.0, -210.0, 0,  AREA_SUMMON, 0,    0, "FILE:TOWN007.SRF", 5, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND)
    AddRoom( 130.0, -280.0, 0,  AREA_CELLAR, 0,    0, "FILE:TOWNST0.SRF", 8, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND | MAP_ROOM_FLAG_DUAL_LEVEL)
    AddRoom( 130.0, -350.0, 0,  AREA_SUMMON, 0,    0, "FILE:TOWN006.SRF", 9,  TRUE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND)
    AddRoom(   0.0, -400.0, 0,  AREA_SUMMON, 0,    0, "FILE:TOWNVR0.SRF", 3, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_FOUND | MAP_ROOM_FLAG_VIRTUE)


    // Cellar
    difficulty = ((NumLocalPlayer()-1)*64)
    AddRoom( 260.0, -280.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLR000.SRF", 9, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 360.0, -280.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLR003.SRF",12, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 360.0, -380.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLR004.SRF",13, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 440.0, -280.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLR001.SRF",13, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 540.0, -280.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLR006.SRF",15, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 330.0, -200.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLR005.SRF",13, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 310.0, -120.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLR004.SRF",17, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 210.0, -130.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLR002.SRF",18, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 410.0, -130.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLR007.SRF",18, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 350.0, -470.0, 1,  AREA_CELLAR,  difficulty,49152, "FILE:CELLR008.SRF",14, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 260.0, -380.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLR009.SRF",14, FALSE, RollDice(1, 256), 0, flags)
    AddRoom( 260.0, -480.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLRBS0.SRF",22, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_BOSS)
    AddRoom( 650.0, -300.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLRBS1.SRF",16, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_BOSS)
    AddRoom( 450.0, -370.0, 1,  AREA_CELLAR,  difficulty,    0, "FILE:CELLRST0.SRF",14, FALSE, RollDice(1, 256), 0, flags | MAP_ROOM_FLAG_DUAL_LEVEL)


  // Sewers
  if(START_LEVEL <= 1)
    fail = TRUE
    while(fail)
      fail = FALSE
      fail = fail | SuperPlopRoom("FILE:SEWER012.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER000.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER009.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER002.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER011.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER004.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER014.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER013.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER006.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER015.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER008.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER001.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER010.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER003.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER005.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER007.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWER016.SRF", AREA_SEWERS, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:SEWERBS0.SRF", AREA_SEWERS, -1, FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:SEWERBS1.SRF", AREA_SEWERS, -1, FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:SEWERST0.SRF", AREA_SEWERS, -1, FALSE, flags | MAP_ROOM_FLAG_DUAL_LEVEL)
      if(fail)
        ClearLevel()


  // Caves
  if(START_LEVEL <= 2)
    fail = TRUE
    while(fail)
      fail = FALSE
      fail = fail | SuperPlopRoom("FILE:CAVES000.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES002.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES004.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES006.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES008.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES005.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES010.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES012.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES014.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES016.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES001.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES003.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES007.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES009.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES011.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES013.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVES015.SRF", AREA_CAVES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:CAVESTN0.SRF", AREA_CAVES, -1, FALSE, flags | MAP_ROOM_FLAG_TOWN)
      fail = fail | SuperPlopRoom("FILE:CAVESVR0.SRF", AREA_CAVES, -1, FALSE, flags | MAP_ROOM_FLAG_VIRTUE)
      fail = fail | SuperPlopRoom("FILE:CAVESBS0.SRF", AREA_CAVES, -1, FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:CAVESBS1.SRF", AREA_CAVES, -1, FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:CAVESST0.SRF", AREA_CAVES, -1, FALSE, flags | MAP_ROOM_FLAG_DUAL_LEVEL)
      if(fail)
        ClearLevel()


  // Upper Dungeon
  if(START_LEVEL <= 3)
    fail = TRUE
    while(fail)
      fail = FALSE
      fail = fail | SuperPlopRoom("FILE:UPPER016.SRF", AREA_UPPER, -1,  4096, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER000.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER004.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER006.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER014.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER008.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER010.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER012.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER001.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER003.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER002.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER005.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER007.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER009.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER011.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER013.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER015.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER017.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPER018.SRF", AREA_UPPER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:UPPERVR0.SRF", AREA_UPPER, -1, FALSE, flags | MAP_ROOM_FLAG_VIRTUE)
      fail = fail | SuperPlopRoom("FILE:UPPERBS0.SRF", AREA_UPPER, -1, FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:UPPERBS1.SRF", AREA_UPPER, -1, FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:UPPERBS2.SRF", AREA_UPPER, -1, FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:UPPERST0.SRF", AREA_UPPER, -1, FALSE, flags | MAP_ROOM_FLAG_DUAL_LEVEL)
      if(fail)
        ClearLevel()


  // Lower Dungeon
  if(START_LEVEL <= 4)
    fail = TRUE
    while(fail)
      fail = FALSE
      fail = fail | SuperPlopRoom("FILE:LOWER000.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER001.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER002.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER003.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER013.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER004.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER005.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER006.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER007.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER008.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER009.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER010.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER011.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER012.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWER014.SRF", AREA_LOWER, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:LOWERVR0.SRF", AREA_LOWER, -1, FALSE, flags | MAP_ROOM_FLAG_VIRTUE)
      fail = fail | SuperPlopRoom("FILE:LOWERBS0.SRF", AREA_LOWER, -1, FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:LOWERBS1.SRF", AREA_LOWER, -1, FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:LOWERST0.SRF", AREA_LOWER, -1, FALSE, flags | MAP_ROOM_FLAG_DUAL_LEVEL)
      if(fail)
        ClearLevel()



  // D'warven Mines
  if(START_LEVEL <= 5)
    fail = TRUE
    while(fail)
      fail = FALSE
      fail = fail | SuperPlopRoom("FILE:MINES000.SRF", AREA_MINES, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINES001.SRF", AREA_MINES, GetLastRoom(), FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINES002.SRF", AREA_MINES, GetLastRoom(), FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINES003.SRF", AREA_MINES, GetLastRoom(), FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINES004.SRF", AREA_MINES, GetLastRoom(), FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINESBS0.SRF", AREA_MINES, GetLastRoom(), FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:MINES005.SRF", AREA_MINES, GetLastRoom(), FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINES006.SRF", AREA_MINES, GetLastRoom(), FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINES007.SRF", AREA_MINES, GetLastRoom(), FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINES008.SRF", AREA_MINES, GetLastRoom(), FALSE, flags)
      mine_fork_room = GetLastRoom()
      fail = fail | SuperPlopRoom("FILE:MINES009.SRF", AREA_MINES, mine_fork_room, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINES010.SRF", AREA_MINES, GetLastRoom(), FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINESVR0.SRF", AREA_MINES, GetLastRoom(), FALSE, flags | MAP_ROOM_FLAG_VIRTUE)

      fail = fail | SuperPlopRoom("FILE:MINES011.SRF", AREA_MINES, mine_fork_room, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINES012.SRF", AREA_MINES, GetLastRoom(), FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:MINESBS1.SRF", AREA_MINES, GetLastRoom(), FALSE, flags | MAP_ROOM_FLAG_BOSS)
      fail = fail | SuperPlopRoom("FILE:MINESTN0.SRF", AREA_MINES, GetLastRoom(), FALSE, flags | MAP_ROOM_FLAG_TOWN)
      // !!!BAD!!!
      // !!!BAD!!!
      // !!!BAD!!!
      // Stair - Outpost Exit
// !!!BAD!!!
// !!!BAD!!!  This isn't the right stair to use -- but oh well...
// !!!BAD!!!
      fail = fail | SuperPlopRoom("FILE:ABYSSST0.SRF", AREA_ABYSS_1, GetLastRoom(), FALSE, flags | MAP_ROOM_FLAG_DUAL_LEVEL)
// !!!BAD!!!
// !!!BAD!!!
// !!!BAD!!!
      // !!!BAD!!!
      // !!!BAD!!!
      // !!!BAD!!!
      if(fail)
        ClearLevel()



  // Abyss Level 1
  if(START_LEVEL <= 6)
    fail = TRUE
    while(fail)
      fail = FALSE
      fail = fail | SuperPlopRoom("FILE:ABYSS000.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS001.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS002.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS003.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS004.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS005.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS006.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS007.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS008.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS009.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS010.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS011.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS012.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS013.SRF", AREA_ABYSS_1, -1, FALSE, flags)
      fail = fail | SuperPlopRoom("FILE:ABYSS014.SRF", AREA_ABYSS_1, -1, FALSE, flags)
//      fail = fail | SuperPlopRoom("FILE:ABYSSST0.SRF", AREA_ABYSS_1, -1, FALSE, flags | MAP_ROOM_FLAG_DUAL_LEVEL)
      if(fail)
        ClearLevel()




  // Pick the water/lava animation textures...
  SystemSet(SYS_WATERTEXTURE, FALSE,  0, "FILE:MPWAWA00.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE,  1, "FILE:MPWAWA01.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE,  2, "FILE:MPWAWA02.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE,  3, "FILE:MPWAWA03.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE,  4, "FILE:MPWAWA04.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE,  5, "FILE:MPWAWA05.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE,  6, "FILE:MPWAWA06.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE,  7, "FILE:MPWAWA07.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE,  8, "FILE:MPWAWA08.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE,  9, "FILE:MPWAWA09.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 10, "FILE:MPWAWA10.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 11, "FILE:MPWAWA11.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 12, "FILE:MPWAWA12.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 13, "FILE:MPWAWA13.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 14, "FILE:MPWAWA14.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 15, "FILE:MPWAWA15.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 16, "FILE:MPWAWA16.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 17, "FILE:MPWAWA17.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 18, "FILE:MPWAWA18.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 19, "FILE:MPWAWA19.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 20, "FILE:MPWAWA20.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 21, "FILE:MPWAWA21.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 22, "FILE:MPWAWA22.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 23, "FILE:MPWAWA23.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 24, "FILE:MPWAWA24.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 25, "FILE:MPWAWA25.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 26, "FILE:MPWAWA26.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 27, "FILE:MPWAWA27.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 28, "FILE:MPWAWA28.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 29, "FILE:MPWAWA29.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 30, "FILE:MPWAWA30.RGB")
  SystemSet(SYS_WATERTEXTURE, FALSE, 31, "FILE:MPWAWA31.RGB")


  // Pick the shimmer animation textures...
  SystemSet(SYS_WATERTEXTURE, TRUE,  0, "FILE:MPSHIM00.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE,  1, "FILE:MPSHIM01.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE,  2, "FILE:MPSHIM02.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE,  3, "FILE:MPSHIM03.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE,  4, "FILE:MPSHIM04.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE,  5, "FILE:MPSHIM05.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE,  6, "FILE:MPSHIM06.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE,  7, "FILE:MPSHIM07.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE,  8, "FILE:MPSHIM08.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE,  9, "FILE:MPSHIM09.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 10, "FILE:MPSHIM10.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 11, "FILE:MPSHIM11.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 12, "FILE:MPSHIM12.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 13, "FILE:MPSHIM13.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 14, "FILE:MPSHIM14.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 15, "FILE:MPSHIM15.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 16, "FILE:MPSHIM16.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 17, "FILE:MPSHIM17.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 18, "FILE:MPSHIM18.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 19, "FILE:MPSHIM19.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 20, "FILE:MPSHIM20.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 21, "FILE:MPSHIM21.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 22, "FILE:MPSHIM22.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 23, "FILE:MPSHIM23.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 24, "FILE:MPSHIM24.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 25, "FILE:MPSHIM25.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 26, "FILE:MPSHIM26.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 27, "FILE:MPSHIM27.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 28, "FILE:MPSHIM28.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 29, "FILE:MPSHIM29.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 30, "FILE:MPSHIM30.RGB")
  SystemSet(SYS_WATERTEXTURE, TRUE, 31, "FILE:MPSHIM31.RGB")


  // Pick the sand texture...
  SystemSet(SYS_SANDTEXTURE, 0, 0, "FILE:MPSAND.RGB")




//-----------------------------------------------------------------------


